// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentMath.Data;

#nullable disable

namespace StudentMath.Data.Migrations
{
    [DbContext(typeof(StudentMathDbContext))]
    partial class StudentMathDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("StudentMath.Core.Models.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExamXmlId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("StudentMath.Core.Models.ExamResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExamResult");
                });

            modelBuilder.Entity("StudentMath.Core.Models.ExamResultTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double?>("ActualResult")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ExamResultId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExamResultId");

                    b.HasIndex("TaskId");

                    b.ToTable("ExamResultTask");
                });

            modelBuilder.Entity("StudentMath.Core.Models.ExamTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("TaskId");

                    b.ToTable("ExamTask");
                });

            modelBuilder.Entity("StudentMath.Core.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentXmlId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentMath.Core.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("ExpectedResult")
                        .HasColumnType("REAL");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskXmlId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("StudentMath.Core.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherXmlId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("StudentMath.Core.Models.TeacherExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherExam");
                });

            modelBuilder.Entity("StudentMath.Core.Models.TeacherStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherStudent");
                });

            modelBuilder.Entity("StudentMath.Core.Models.ExamResult", b =>
                {
                    b.HasOne("StudentMath.Core.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentMath.Core.Models.Student", "Student")
                        .WithMany("ExamResults")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentMath.Core.Models.ExamResultTask", b =>
                {
                    b.HasOne("StudentMath.Core.Models.ExamResult", "ExamResult")
                        .WithMany("Tasks")
                        .HasForeignKey("ExamResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentMath.Core.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamResult");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("StudentMath.Core.Models.ExamTask", b =>
                {
                    b.HasOne("StudentMath.Core.Models.Exam", "Exam")
                        .WithMany("ExamTasks")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentMath.Core.Models.Task", "Task")
                        .WithMany("ExamTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("StudentMath.Core.Models.TeacherExam", b =>
                {
                    b.HasOne("StudentMath.Core.Models.Exam", "Exam")
                        .WithMany("TeacherExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentMath.Core.Models.Teacher", "Teacher")
                        .WithMany("TeacherExams")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentMath.Core.Models.TeacherStudent", b =>
                {
                    b.HasOne("StudentMath.Core.Models.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentMath.Core.Models.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentMath.Core.Models.Exam", b =>
                {
                    b.Navigation("ExamTasks");

                    b.Navigation("TeacherExams");
                });

            modelBuilder.Entity("StudentMath.Core.Models.ExamResult", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("StudentMath.Core.Models.Student", b =>
                {
                    b.Navigation("ExamResults");

                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("StudentMath.Core.Models.Task", b =>
                {
                    b.Navigation("ExamTasks");
                });

            modelBuilder.Entity("StudentMath.Core.Models.Teacher", b =>
                {
                    b.Navigation("TeacherExams");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
