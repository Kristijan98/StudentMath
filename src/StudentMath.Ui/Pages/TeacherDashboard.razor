@page "/teacher-dashboard"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject IHttpClientFactory HttpClientFactory
@inject AuthServiceModel AuthService


@if (string.IsNullOrEmpty(AuthService.Token))
{
    <p>You must be logged in to see your results.</p>
}
else if (AuthService.Role != "Teacher")
{
    <p>You must be a teacher to view this page.</p>
}

else
{
    

<h2>Teacher Dashboard</h2>

<hr />

<h3>📤 Upload Exam XML</h3>

<InputFile OnChange="OnFileSelected" />
<button @onclick="Upload">Upload</button>

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

<hr />

<h3>📋 Task Results</h3>

<div class="filters" style="margin-bottom: 1rem;">
    <input placeholder="Filter by Student ID" @bind="FilterStudent" />
    <input placeholder="Filter by Exam ID" @bind="FilterExam" />
    <input placeholder="Filter by Task ID" @bind="FilterTask" />
    <button @onclick="LoadTasks">Apply Filters</button>
</div>

@if (Tasks == null)
{
    <p>Loading...</p>
}
else if (Tasks.Count == 0)
{
    <p>No results found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Student ID</th>
                <th>Exam ID</th>
                <th>Task ID</th>
                <th>Expression</th>
                <th>Submitted</th>
                <th>Actual</th>
                <th>Correct?</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in Tasks)
            {
                <tr>
                    <td>@t.StudentId</td>
                    <td>@t.ExamId</td>
                    <td>@t.TaskId</td>
                    <td>@t.TaskExpression</td>
                    <td>@t.ExpectedResult</td>
                    <td>@t.ActualResult</td>
                    <td>@(t.IsCorrect ? "✅" : "❌")</td>
                </tr>
            }
        </tbody>
    </table>
}
}
@code {
    //  Upload Section
    private IBrowserFile? SelectedFile;
    private string Message = "";

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
    }

    private async Task Upload()
    {
        if (SelectedFile == null) return;

        var http = HttpClientFactory.CreateClient("API");

        using var content = new MultipartFormDataContent();

        var stream = SelectedFile.OpenReadStream(1024 * 1024 * 10); 
        content.Add(new StreamContent(stream), "file", SelectedFile.Name);

        http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AuthService.Token);

        var response = await http.PostAsync("api/exam/upload", content);
        Message = response.IsSuccessStatusCode ? "File uploaded successfully!" : "Upload failed.";
    }

    //  Tasks Section 
    private List<TeacherTaskDtoUI>? Tasks;
    private string? FilterStudent;
    private string? FilterExam;
    private string? FilterTask;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        var http = HttpClientFactory.CreateClient("API");
        http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AuthService.Token);

        var url = "api/exam/all";

        var queryParams = new List<string>();
        if (!string.IsNullOrEmpty(FilterStudent)) queryParams.Add($"studentXmlId={FilterStudent}");
        if (!string.IsNullOrEmpty(FilterExam)) queryParams.Add($"examXmlId={FilterExam}");
        if (!string.IsNullOrEmpty(FilterTask)) queryParams.Add($"taskXmlId={FilterTask}");

        if (queryParams.Count > 0)
            url += "?" + string.Join("&", queryParams);

        Tasks = await http.GetFromJsonAsync<List<TeacherTaskDtoUI>>(url);
    }

    public class TeacherTaskDtoUI
    {
        public string StudentId { get; set; } = string.Empty;
        public string ExamId { get; set; } = string.Empty;
        public string TaskId { get; set; } = string.Empty;
        public string TaskExpression { get; set; } = string.Empty;
        public double ExpectedResult { get; set; }
        public double ActualResult { get; set; }
        public bool IsCorrect { get; set; }
    }
}
